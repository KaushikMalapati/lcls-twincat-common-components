<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_XPIM" Id="{aa9f645d-c463-4c9e-8962-8aa3b3b2b9c3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_XPIM
VAR_IN_OUT
    stYStage: ST_MotionStage;
    stZoomStage: ST_MotionStage;
    stFocusStage: ST_MotionStage;
    fbFFHWO: FB_HardwareFFOutput;
    fbArbiter: FB_Arbiter;
    stEl6In: EL6inData22b;
    stEl6Out: EL6OutData22b;
END_VAR
VAR_INPUT
    stOut: ST_PositionState;
    stYag: ST_PositionState;
    stDiamond: ST_PositionState;
    stReticle: ST_PositionState;
    {attribute 'pytmc' := '
        pv: MMS:STATE:SET
        io: io
    '}
    eEnumSet: E_XPIM_States;
    bEnableMotion: BOOL;
    bEnableBeamParams: BOOL;
    bEnablePositionLimits: BOOL;
    sDeviceName: STRING;
    sTransitionKey: STRING;
    bReadDBNow: BOOL;

    {attribute 'pytmc' := '
        pv: CLZ:LOCK
        io: io
        field: ZNAM Unlocked
        field: ONAM Locked
    '}
    bZoomLock: BOOL;

    {attribute 'pytmc' := '
        pv: CLF:LOCK
        io: io
        field: ZNAM Unlocked
        field: ONAM Locked
    '}
    bFocusLock: BOOL;

    bZoomEndFwd AT %I*: BOOL;
    bZoomEndBwd AT %I*: BOOL;
    bFocusEndFwd AT %I*: BOOL;
    bFocusEndBwd AT %I*: BOOL;
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: MMS:STATE:GET
        io: i
    '}
    eEnumGet: E_XPIM_States;
    stDbStateParams: ST_DbStateParams;
END_VAR
VAR
    bInit: BOOL;

    fbYStage: FB_MotionStage;
    fbZoom: FB_MotionStage;
    fbFocus: FB_MotionStage;

    fbStateDefaults: FB_PositionState_Defaults;

    {attribute 'pytmc' := '
        pv: MMS
        io: i
    '}
    fbStates: FB_PositionStatePMPS1D;
    astPositionState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;

    {attribute 'pytmc' := '
        pv: MFW
    '}
    fbFilterWheel: FB_XPIM_FilterWheel;

    {attribute 'pytmc' := '
        pv: CAM
    '}
    fbOpal: FB_XPIM_Opal;

    {attribute 'pytmc' := '
        pv: CIL
    '}
    fbLED: FB_XPIM_LED;

    {attribute 'pytmc' := '
        pv: SFW
    '}
    fbFlowSwitch: FB_XTES_Flowswitch;
END_VAR
VAR CONSTANT
    // State defaults if not provided
    fDelta: LREAL := 2;
    fAccel: LREAL := 200;
    fOutDecel: LREAL := 25;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF NOT bInit THEN
    bInit := TRUE;

    stYStage.bHardwareEnable := TRUE;
    stYStage.bPowerSelf := FALSE;
    // No limit switch at the bottom
    stYStage.bLimitBackwardEnable := TRUE;

    // Extra lock on lens + lens limits are NO instead of NC
    stZoomStage.bHardwareEnable := NOT bZoomLock;
    stZoomStage.bPowerSelf := TRUE;
    stZoomStage.bLimitForwardEnable := NOT bZoomEndFwd;
    stZoomStage.bLimitBackwardEnable := NOT bZoomEndBwd;
    stZoomStage.nHomingMode := ENUM_EpicsHomeCmd.LOW_LIMIT;
    stZoomStage.fHomePosition := 0;

    stFocusStage.bHardwareEnable := NOT bFocusLock;
    stFocusStage.bPowerSelf := TRUE;
    stFocusStage.bLimitForwardEnable := NOT bFocusEndFwd;
    stFocusStage.bLimitBackwardEnable := NOT bFocusEndBwd;
    stFocusStage.nHomingMode := ENUM_EpicsHomeCmd.LOW_LIMIT;
    stFocusStage.fHomePosition := 0;

    // Partial backcompat, this used to set fVelocity too but this should be set per install
    fbStateDefaults(stPositionState:=stOut, fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fOutDecel);
    fbStateDefaults(stPositionState:=stYag, fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fAccel);
    fbStateDefaults(stPositionState:=stDiamond, fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fAccel);
    fbStateDefaults(stPositionState:=stReticle, fDeltaDefault:=fDelta, fAccelDefault:=fAccel, fDecelDefault:=fAccel);
END_IF

fbYStage(stMotionStage:=stYStage);
fbZoom(stMotionStage:=stZoomStage);
fbFocus(stMotionStage:=stFocusStage);

// Set special error message for lens lock
IF stZoomStage.bExecute AND bZoomLock THEN
    IF NOT stZoomStage.bError THEN
        stZoomStage.bError := TRUE;
    END_IF
    stZoomStage.sCustomErrorMessage := 'Zoom lens is locked!';
END_IF
IF stFocusStage.bExecute AND bFocusLock THEN
    IF NOT stFocusStage.bError THEN
        stFocusStage.bError := TRUE;
    END_IF
    stFocusStage.sCustomErrorMessage := 'Focus lens is locked!';
END_IF

astPositionState[E_XPIM_States.OUT] := stOut;
astPositionState[E_XPIM_States.YAG] := stYag;
astPositionState[E_XPIM_States.DIAMOND] := stDiamond;
astPositionState[E_XPIM_States.RETICLE] := stReticle;

fbStates(
    stMotionStage:=stYStage,
    astPositionState:=astPositionState,
    eEnumSet:=eEnumSet,
    eEnumGet:=eEnumGet,
    fbFFHWO:=fbFFHWO,
    fbArbiter:=fbArbiter,
    bEnableMotion:=bEnableMotion,
    bEnableBeamParams:=bEnableBeamParams,
    bEnablePositionLimits:=bEnablePositionLimits,
    sDeviceName:=sDeviceName,
    sTransitionKey:=sTransitionKey,
    bReadDBNow:=bReadDBNow,
    stDbStateParams=>stDbStateParams,
);

stOut := astPositionState[E_XPIM_States.OUT];
stYag := astPositionState[E_XPIM_States.YAG];
stDiamond := astPositionState[E_XPIM_States.DIAMOND];
stReticle := astPositionState[E_XPIM_States.RETICLE];

fbFilterWheel(
    bExecute:=TRUE,
    stIn_El6:=stEl6In,
    stOut_El6:=stEl6Out,
);

fbOpal();
fbLED(enumXPIM:=eEnumGet);
fbFlowSwitch();]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>